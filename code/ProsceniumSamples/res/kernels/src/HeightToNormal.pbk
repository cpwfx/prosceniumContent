<languageVersion : 1.0;>
#define kUseTwoMaps 1

kernel HeightToNormal
<
	namespace:		"Pixel Bender";
    vendor:			"Adobe";
    version:		1;
    description:	"A rippling effect, animatable using the time parameter";
>
{
    input image4 src;
    output pixel4 dst;
    
    parameter float scale
    <
        minValue:-100.0;
        maxvalue:10.0;
        defaultValue:0.5;
    >;
    
	void evaluatePixel()
	{
        float2 coords = outCoord();
        float4 valuePX = sampleNearest( src, coords + float2(1.0, 0.0) );
        float4 valueNX = sampleNearest( src, coords - float2(1.0, 0.0) );
        float4 valuePY = sampleNearest( src, coords + float2(0.0, 1.0) );
        float4 valueNY = sampleNearest( src, coords - float2(0.0, 1.0) );
        float4 neighbors;
        
#ifdef kUseTwoMaps
        float factor = 1.0 / (2.0 * 255.0); // 255.0 * 2.0
        // Reconstruct the high-precision values from the low precision values
        valuePX.r += 255.0 * (valuePX.b - 0.5);
        valueNX.r += 255.0 * (valueNX.b - 0.5);
        valuePY.r += 255.0 * (valuePY.b - 0.5);
        valueNY.r += 255.0 * (valueNY.b - 0.5);
#else
        float factor = 1.0 / 2.0;
#endif
        // Take into account the boundary conditions in the pool
            
        neighbors.r = valuePX.r * (valuePX.g) + (1.0 - valuePX.g) * valueNX.r; // Enforce the boundary conditions as mirror reflections
        neighbors.g = valuePY.r * (valuePY.g) + (1.0 - valuePY.g) * valueNY.r; // Enforce the boundary conditions as mirror reflections
        neighbors.b = valueNX.r * (valueNX.g) + (1.0 - valueNX.g) * valuePX.r; // Enforce the boundary conditions as mirror reflections
        neighbors.w = valueNY.r * (valueNY.g) + (1.0 - valueNY.g) * valuePY.r; // Enforce the boundary conditions as mirror reflections
         
        float4 slope = float4(scale * (neighbors.b - neighbors.r) * factor, 
                               scale * (neighbors.w - neighbors.g) * factor, 1.0, 0.0);
 //       normal = normalize(normal);
        
        slope.x *= 5.0;
//        slope.x = clamp(slope.x, -0.5, 0.5); // Only required for large disturbances to the water (large slopes)
        slope.y *= 5.0;
//        slope.y = clamp(slope.y, -0.5, 0.5); // Only required for large disturbances to the water (large slopes)
 
		// Add offset vector to current pixel position vector and sample that pixel in this position.
		dst = float4( 0.5 + slope.x, 0.5 + slope.y, 1.0, 1.0 );
	}
}